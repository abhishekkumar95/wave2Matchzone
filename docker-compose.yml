version: '2.1'

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
 eureka-server:
   build: eureka-server/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: eureka-service
   hostname: localhost
   ports:
     - 8081:8081
   healthcheck:
     test: "exit 0"
 
 user-service:
   build: user-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   mem_limit: 150m
   network_mode: "host"
   image: user-service
   hostname: localhost
   ports:
     - 8091:8091
   healthcheck:
     test: "exit 0"

 downstream-service:
   build: downstream-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: downstream-service
   hostname: localhost
   ports:
     - 8085:8085
   healthcheck:
     test: "exit 0"

 academic-service:
   build: academic-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: academic-service
   mem_limit: 150m
   hostname: localhost
   ports:
     - 8082:8082
   healthcheck:
     test: "exit 0"

 certification-service:
   build: certification-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: certification-service
   hostname: localhost
   ports:
     - 8083:8083
   healthcheck:
     test: "exit 0"

 location-service:
   build: location-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: location-service
   hostname: localhost
   ports:
     - 8087:8087
   healthcheck:
     test: "exit 0"

 personalinfo-service:
   build: user-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: user-service
   hostname: localhost
   ports:
     - 8088:8088
   healthcheck:
     test: "exit 0"
 
 project-service:
   build: projects-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: project-service
   hostname: localhost
   ports:
     - 8089:8089
   healthcheck:
     test: "exit 0"

 skill-service:
   build: skill-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: skill-service
   hostname: localhost
   ports:
     - 8090:8090
   healthcheck:
     test: "exit 0"

 config-service:
   build: config-service/
   restart: always
   network_mode: "host"
   image: config-service
   mem_limit: 150m
   hostname: localhost
   ports:
     - 8094:8094
   healthcheck:
     test: "exit 0"

 api-gateway:
   build: zuul-apigateway/
   depends_on:
     config-service:
       condition: service_healthy
     eureka-server:
       condition: service_healthy
   restart: always
   mem_limit: 150m
   network_mode: "host"
   image: zuul-service
   hostname: localhost
   ports:
     - 8080:8080
   healthcheck:
     test: "exit 0"
 
 userprofile-service:
   build: userprofile-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   mem_limit: 150m
   network_mode: "host"
   image: userprofile-service
   hostname: localhost
   ports:
     - 8093:8093
   healthcheck:
     test: "exit 0"

 userauthentication-service:
   build: userauthentication-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   mem_limit: 150m
   network_mode: "host"
   image: userauthentication-service
   hostname: localhost
   ports:
     - 8092:8092
   healthcheck:
     test: "exit 0"

 indexer-service:
   build: indexer-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   mem_limit: 512m
   network_mode: "host"
   image: indexer-service
   hostname: localhost
   ports:
     - 8086:8086
   healthcheck:
     test: "exit 0"

 autocomplete-service:
   build: autocomplete-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   mem_limit: 150m
   image: autocomplete-service
   hostname: localhost
   ports:
     - 8096:8096
   healthcheck:
     test: "exit 0"

 coreNLP-service:
   build: coreNLP-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   mem_limit: 150m
   network_mode: "host"
   image: coreNLP-service
   hostname: localhost
   ports:
     - 8084:8084
   healthcheck:
     test: "exit 0"

 search-service:
   build: search-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: search-service
   mem_limit: 512m
   hostname: localhost
   ports:
     - 8095:8095
   healthcheck:
     test: "exit 0"


 
 zookeeper:
   image: wurstmeister/zookeeper
   ports:
     - "2181:2181"
   network_mode: "host"
   mem_limit: 150m
   hostname: localhost
   restart: always
   healthcheck:
     test: "exit 0"

 kafka:
   image: wurstmeister/kafka
   ports:
     - "9092:9092"
   environment:
     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://13.232.40.6:9092
     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
     KAFKA_ZOOKEEPER_CONNECT: localhost:2181
   network_mode: "host"
   hostname: localhost
   depends_on:
     - zookeeper
   mem_limit: 150m
   restart: always
   healthcheck:
     test: "exit 0"
 
 mongodb:
   image: mongo
   container_name: "mongodb"
   volumes:
     - ./data/db:/data/db
   ports:
     - 27000:27017
   restart: always
   mem_limit: 150m
   healthcheck:
     test: "exit 0"

 mysql:
   image: mysql:5.7
   ports:
     - 3306:3306
   container_name: mysql
   mem_limit: 150m
   environment:
     - MYSQL_ROOT_PASSWORD=root
     - MYSQL_DATABASE=register
     - MYSQL_PASSWORD=root
     - MYSQL_USER=root
   volumes:
     - /opt/datasql:/var/lib/mysql
   network_mode: "host"
   hostname: localhost
   restart: always
   healthcheck:
     test: "exit 0"

 neo4j:
   image: neo4j:latest
   ports:
     - "7474:7474"
     - "7687:7687"
   container_name: neo4j
   mem_limit: 1g
   environment:
     - NEO4J_AUTH=neo4j/12345
#      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
#      - NEO4J_apoc_import_file_enabled=true
#      - NEO4J_dbms_shell_enabled=true
   volumes:
#      - ./plugins:/plugins
     - $HOME/neo4j/data:/data
#      - ./import:/import
   healthcheck:
     test: "exit 0"


 matchzone-front-end:
  build: Matchzone-Front-End/
  image: matchzone-front-end
  container_name: matchzone-front-end
  network_mode: "host"
  hostname: localhost
  mem_limit: 150m
  ports:
   - 4200:4200
  restart: always
  healthcheck:
   test: "exit 0" 

 prometheus:
   image: prom/prometheus
   ports:
    - "9099:9090"
   mem_limit: 150m
   volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
    - ./prometheus/:/etc/prometheus/
    - prometheus_data:/prometheus
   command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.console.libraries=/etc/prometheus/console_libraries'
    - '--web.console.templates=/etc/prometheus/consoles'
    - '--storage.tsdb.retention=200h'
    - '--web.enable-lifecycle'
   container_name: prometheus

 grafana:
   ports:
     - "3000:3000"
   mem_limit: 150m
   volumes:
     - grafana_data:/var/lib/grafana
     - ./grafana/datasources:/etc/grafana/datasources
     - ./grafana/dashboards:/etc/grafana/dashboards
     - ./grafana/setup.sh:/setup.sh
   command: ./setup.sh
   environment:
     - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
     - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
     - GF_USERS_ALLOW_SIGN_UP=false
   links:
    - prometheus
   image: grafana/grafana
   container_name: grafana
